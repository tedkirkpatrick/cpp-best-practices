# Build the system under conditions offering best code coverage measurement
# (no sanitizers, -O0)
# This build does not do static checking---that should be done in CI builds
name: codecov
on:
  pull_request:
  release:
    types: [published]
  push:
    branches:
      - codecov

env:
  # Conan cache environment variables
  CONAN_SYSREQUIRES_MODE: enabled
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"

jobs:
  Test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04
        compiler:
          # you can specify the version after `-` like "llvm-13.0.0".
          - llvm-13.0.0
          #- gcc-11
        generator:
          - "Ninja Multi-Config"
        build_type:
          - Debug
        developer_mode:
          - ON

        include:
          # Add appropriate variables for gcov version required. This will intentionally break
          # if you try to use a compiler that does not have gcov set
          #- compiler: gcc-11
          #  gcov_executable: gcov
          - compiler: llvm-13.0.0
            gcov_executable: "llvm-cov gcov"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup cache
        uses: ./.github/actions/setup_cache
        with:
          compiler: ${{ matrix.compiler }}
          build_type: ${{ matrix.build_type }}
          developer_mode: ${{ matrix.developer_mode }}
          generator: ${{ matrix.generator }}

      - name: Setup build tools
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: ${{ contains(matrix.os, 'windows' )}}

          cmake: true
          ninja: true
          conan: true
          vcpkg: false
          ccache: true
          gcovr: true

      - name: Cleanup Conan system packages (they are not properly cached)
        run: |
          conan remove -f '*/system'

      - name: Configure CMake
        # The dynamic_project_options() macro only allows COVERAGE to be turned ON when DEVELOPER_MODE=ON.
        # So we turn DEVELOPER_MODE ON but then turn OFF nearly every flag that it defaults to ON,
        # such as the sanitizers and static checkers. Sanitizers confuse the coverage counts and the static
        # checkers just waste time. The sanitizers and checkers are run in the CI script, not here.
        # This run is just to get coverage data.
        run: |
          cmake -S . -B ./build -G "${{matrix.generator}}" -DCMAKE_BUILD_TYPE:STRING=${{matrix.build_type}} -DENABLE_DEVELOPER_MODE:BOOL=${{matrix.developer_mode}} -DOPT_ENABLE_COVERAGE=ON -DOPT_ENABLE_SANITIZER_ADDRESS=OFF -DOPT_ENABLE_SANITIZER_UNDEFINED_BEHAVIOR=OFF -DOPT_ENABLE_CPPCHECK=OFF -DOPT_ENABLE_CLANG_TIDY=OFF -DGIT_SHA:STRING=${{ github.sha }}

      - name: Build
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: |
          cmake --build ./build --config ${{matrix.build_type}}

      - name: "Test and compute coverage"
        working-directory: ./build
        run: |
          ctest -C ${{matrix.build_type}}
          gcovr -j ${{env.nproc}} --delete --root ../ --print-summary --xml-pretty --xml coverage.xml . --gcov-executable '${{ matrix.gcov_executable }}'

      - name: Publish coverage to codecov
        uses: codecov/codecov-action@v2
        with:
          flags: ${{ runner.os }}
          name: ${{ runner.os }}-coverage
          files: ./build/coverage.xml
